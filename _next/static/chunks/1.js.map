{"version":3,"file":"static/chunks/1.js","sources":["webpack:///./assets/utils/hooks/useRenderCounter.js","webpack:///./components/_demo/CountContextDemo.js","webpack:///./context/_demo/countContext.js"],"sourcesContent":["import { useEffect, useRef } from 'react'\r\n\r\nconst useRenderCounter = () => {\r\n  const ref = useRef()\r\n  useEffect(() => {\r\n    ref.current.textContent = Number(ref.current.textContent || '0') + 1\r\n  })\r\n  return (\r\n    <span\r\n      style={{\r\n        backgroundColor: '#ccc',\r\n        borderRadius: 4,\r\n        padding: '2px 4px',\r\n        fontSize: '0.8rem',\r\n        margin: '0 6px',\r\n        display: 'inline-block',\r\n      }}\r\n      ref={ref}\r\n    />\r\n  )\r\n}\r\n\r\nexport default useRenderCounter\r\n","import React from 'react'\r\nimport { CountProvider, useCountState, useCountUpdater } from '@context/_demo/countContext'\r\nimport RenderCounter from '@utils/hooks/useRenderCounter'\r\n\r\nconst CountDisplay = React.memo(() => {\r\n  // console.log('CountContextDemo-CountDisplay')\r\n\r\n  const count = useCountState()\r\n  return (\r\n    <div style={{ border: '1px solid black', padding: 10 }}>\r\n      <RenderCounter />\r\n      {`The current count is ${count}. `}\r\n    </div>\r\n  )\r\n})\r\n\r\nconst Counter = React.memo(() => {\r\n  // console.log('CountContextDemo-Counter')\r\n\r\n  const increment = useCountUpdater()\r\n  return (\r\n    <div style={{ border: '1px solid black', padding: 10 }}>\r\n      <RenderCounter />\r\n      <button type=\"button\" onClick={increment}>\r\n        Increment count\r\n      </button>\r\n    </div>\r\n  )\r\n})\r\n\r\nconst CountContextDemo = () => {\r\n  const [, forceUpdate] = React.useState()\r\n\r\n  return (\r\n    <div style={{ border: '1px solid black', padding: 10 }}>\r\n      <RenderCounter />\r\n      <button type=\"button\" onClick={() => forceUpdate({})}>\r\n        force render\r\n      </button>\r\n      <CountProvider>\r\n        <CountDisplay />\r\n        <Counter />\r\n      </CountProvider>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CountContextDemo\r\n","import React from 'react'\r\n\r\nconst CountStateContext = React.createContext()\r\nconst CountUpdaterContext = React.createContext()\r\n\r\nfunction CountProvider({ children }) {\r\n  const [count, setCount] = React.useState(0)\r\n  return (\r\n    <CountStateContext.Provider value={count}>\r\n      <CountUpdaterContext.Provider value={setCount}>{children}</CountUpdaterContext.Provider>\r\n    </CountStateContext.Provider>\r\n  )\r\n}\r\n\r\nfunction useCountState() {\r\n  const countState = React.useContext(CountStateContext)\r\n  if (typeof countState === 'undefined') {\r\n    throw new Error('useCountState must be used within a CountProvider')\r\n  }\r\n  return countState\r\n}\r\n\r\nfunction useCountUpdater() {\r\n  const setCount = React.useContext(CountUpdaterContext)\r\n  if (typeof setCount === 'undefined') {\r\n    throw new Error('useCountUpdater must be used within a CountProvider')\r\n  }\r\n  const increment = React.useCallback(() => setCount(c => c + 1), [setCount])\r\n  return increment\r\n}\r\n\r\nexport { CountProvider, useCountState, useCountUpdater }\r\n"],"mappings":";;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACtBA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AC/CA;AAEA;AACA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;;A","sourceRoot":""}