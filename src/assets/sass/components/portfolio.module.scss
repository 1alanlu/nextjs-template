@import '../helpers';

@mixin toggle($control-width: 100, $switch-width: 30, $text-active: '新→舊', $text-inactive: '舊→新') {
  position: relative;
  display: inline-block;
  overflow: hidden;
  margin: 0 auto;
  width: #{$control-width}px;
  height: #{$switch-width}px;
  background: transparent;
  // border: 1px solid #ccc;
  border-radius: #{$switch-width / 2}px;

  .switch {
    position: absolute;
    left: -1px;
    display: block;
    width: #{$switch-width}px;
    height: #{$switch-width}px;
    background: #e7e7e7;
    border-radius: 50%;
    // box-shadow: 0 0 2px rgba(0, 0, 0, 0.1), 0 0 1px 1px rgba(255, 255, 255, 0.7) inset, 0 0 1px 0 rgba(0, 0, 0, 0.5);
    transition: 0.3s all ease;
    text-transform: uppercase;
    pointer-events: none;

    &::before,
    &::after {
      @include font-size(12px, 16px);

      z-index: -1;
      position: absolute;
      width: #{$control-width}px;
      height: #{$switch-width}px;
      line-height: #{$switch-width}px;
      white-space: nowrap;
      // text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.3);
    }

    &::before {
      right: #{$switch-width / 2}px;
      padding-right: #{$switch-width * 0.75}px;
      text-align: right;
      color: $color-quaternary;
      background: map-get($colors, headerBG);
      content: '#{$text-active}';
    }

    &::after {
      left: #{$switch-width / 2}px;
      padding-left: #{$switch-width * 0.75}px;
      color: map-get($colors, headerBG);
      background: $color-quaternary;
      content: '#{$text-inactive}';
    }
  }

  input {
    position: absolute;
    display: block;
    margin: 0;
    padding: 0;
    width: #{$control-width}px;
    height: #{$switch-width}px;
    opacity: 0;

    &:checked ~ .switch {
      left: #{$control-width - $switch-width}px;
    }
  }
}

.nav {
  @extend %center-flex;

  position: relative;
  justify-content: space-around;
  padding: 5px;
  width: 100%;

  &::before {
    @include pseudo();

    top: 50%;
    left: 50%;
    width: 90%;
    height: 0.2rem;
    background-color: map-get($colors, headerBG);
    transform: translate(-50%, -50%);
  }

  > * {
    z-index: 1;
    margin-right: 10px;
    padding: 2.5px 5px;
    background-color: map-get($colors, bodyBG);
    border: 2px solid map-get($colors, bodyText);
    cursor: pointer;

    &:last-of-type {
      margin-right: 0;
    }

    &.active {
      color: $color-quaternary;
      background-color: map-get($colors, bodyText);
    }
  }
}

.topBox {
  @extend %center-flex;

  position: relative;
  width: 100%;

  .nav {
    flex: 8;
  }

  & > div:nth-child(2) {
    @extend %center-flex;

    flex: 2;

    [for='default'] {
      @include toggle(90, 30);

      margin-right: 10px;

      @include mq(tablet-small, max) {
        @include toggle(70, 20);
      }
    }
  }
}

.box {
  position: relative;
  display: block;
  overflow: hidden;
  margin: 0.5rem;
  font-size: 0;
  box-shadow: 4px 4px 6px rgba($color-secondary, 0.3);
  cursor: pointer;

  figure {
    line-height: 0;
  }

  img {
    max-width: 100%;
    height: auto;
    border-style: none;
    vertical-align: top;
  }

  .mask {
    position: absolute;
    top: -100%;
    left: 0;
    width: 100%;
    height: 100%;
    visibility: hidden;
    transition-property: top, visibility;
    transition-duration: 0.3s;

    .category {
      @extend %center-flex;

      justify-content: start;
      margin: 0;
      padding: 0;
      line-height: 0;

      span {
        @include font-size(12px, 12px);

        margin: 1px;
        padding: 1px;
        color: $color-dark;
        background-color: rgba($color-white, 0.5);
        border-radius: 0.2em;
      }
    }

    figcaption {
      display: block;
      margin: 0.2em 0 0;
      font-weight: normal;
    }
  }

  &:hover {
    box-shadow: 4px 4px 12px rgba($color-secondary, 0.3);

    .mask {
      top: 0;
      visibility: visible;
    }
  }
}

.tips {
  @extend %center-flex;

  z-index: z(scrolltop);
  position: fixed;
  bottom: 5vh;
  left: 0;
  width: 100%;
  height: 5vh;
  text-align: center;
}

.more,
.loading {
  @extend %center-flex;

  color: inherit;
  background-color: transparent;
  cursor: pointer;
}

.loading {
  width: 18px;
  height: 18px;
  border: solid 2px transparent;
  border-top-color: $color-tertiary;
  border-left-color: $color-tertiary;
  border-radius: 50%;
  animation: nprogress-spinner 0.5s linear infinite;
}

.done {
  margin: 30px auto;
  width: 100%;
  text-align: center;
}

@keyframes nprogress-spinner {
  from {
    transform: rotate(0deg);
  }

  to {
    transform: rotate(360deg);
  }
}
